/* UDP Server for receiving a random no from a UDP Client */

#include <string.h>
#include <sys/param.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_netif.h"
#include "protocol_examples_common.h"
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>

#ifdef CONFIG_EXAMPLE_SOCKET_IP_INPUT_STDIN
#include "addr_from_stdin.h"
#endif

#if defined(CONFIG_EXAMPLE_IPV4)
#define HOST_IP_ADDR CONFIG_EXAMPLE_IPV4_ADDR
#elif defined(CONFIG_EXAMPLE_IPV6)
#define HOST_IP_ADDR CONFIG_EXAMPLE_IPV6_ADDR
#else
#define HOST_IP_ADDR ""
#endif

#define PORT CONFIG_EXAMPLE_PORT

static const char *TAG = "example";

static void udp_client_task(void *pvParameters)
{
    char rx_buffer[128]; // Buffer to hold received data
    int addr_family = 0;
    int ip_protocol = 0;
    const char *TAG = "example";

    // Client's IP address and port
    char host_ip[] = HOST_IP_ADDR;
    int client_port = 3333; // Port where the client will listen

    while (1) {

#if defined(CONFIG_EXAMPLE_IPV4)
        struct sockaddr_in dest_addr;
        dest_addr.sin_addr.s_addr = inet_addr(HOST_IP_ADDR);
        dest_addr.sin_family = AF_INET;
        dest_addr.sin_port = htons(client_port); // Set the port for IPv4
        addr_family = AF_INET;
        ip_protocol = IPPROTO_IP;
#elif defined(CONFIG_EXAMPLE_IPV6)
        struct sockaddr_in6 dest_addr = { 0 };
        inet6_aton(HOST_IP_ADDR, &dest_addr.sin6_addr);
        dest_addr.sin6_family = AF_INET6;
        dest_addr.sin6_port = htons(client_port); // Set the port for IPv6
        dest_addr.sin6_scope_id = esp_netif_get_netif_impl_index(EXAMPLE_INTERFACE);
        addr_family = AF_INET6;
        ip_protocol = IPPROTO_IPV6;
#elif defined(CONFIG_EXAMPLE_SOCKET_IP_INPUT_STDIN)
        struct sockaddr_storage dest_addr = { 0 };
        ESP_ERROR_CHECK(get_addr_from_stdin(client_port, SOCK_DGRAM, &ip_protocol, &addr_family, &dest_addr));
#endif

        // Create a socket
        int sock = socket(addr_family, SOCK_DGRAM, ip_protocol);
        if (sock < 0) {
            ESP_LOGE(TAG, "Unable to create socket: errno %d", errno);
            break;
        }

        // Bind the socket to the client port
        struct sockaddr_in bind_addr;
        bind_addr.sin_family = AF_INET;
        bind_addr.sin_addr.s_addr = INADDR_ANY;
        bind_addr.sin_port = htons(client_port);

        if (bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) < 0) {
            ESP_LOGE(TAG, "Socket unable to bind: errno %d", errno);
            close(sock);
            break;
        }

        // Set timeout for receiving data
        struct timeval timeout;
        timeout.tv_sec = 10; // Set timeout to 10 seconds
        timeout.tv_usec = 0;
        setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof timeout);

        ESP_LOGI(TAG, "Socket created and bound to port %d, receiving from %s:%d", client_port, HOST_IP_ADDR, client_port);

        while (1) {
            struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
            socklen_t socklen = sizeof(source_addr);
            int len = recvfrom(sock, rx_buffer, sizeof(rx_buffer) - 1, 0, (struct sockaddr *)&source_addr, &socklen);

            // Error occurred during receiving
            if (len < 0) {
                ESP_LOGE(TAG, "recvfrom failed: errno %d", errno);
                if (errno == ENETUNREACH || errno == EHOSTUNREACH) {
                    ESP_LOGE(TAG, "Network is unreachable or no route to host.");
                }
                break;
            }
            // Data received
            else {
                rx_buffer[len] = 0; // Null-terminate the received data

                // Log sender's IP address
                if (source_addr.ss_family == AF_INET) {
                    char addr_str[INET_ADDRSTRLEN];
                    inet_ntop(AF_INET, &(((struct sockaddr_in *)&source_addr)->sin_addr), addr_str, sizeof(addr_str));
                    ESP_LOGI(TAG, "Received %d bytes from %s:", len, addr_str);
                } else if (source_addr.ss_family == AF_INET6) {
                    char addr_str[INET6_ADDRSTRLEN];
                    inet_ntop(AF_INET6, &(((struct sockaddr_in6 *)&source_addr)->sin6_addr), addr_str, sizeof(addr_str));
                    ESP_LOGI(TAG, "Received %d bytes from %s:", len, addr_str);
                }
                ESP_LOGI(TAG, "%s", rx_buffer);
            }

            vTaskDelay(2000 / portTICK_PERIOD_MS); // Delay for 2 seconds before the next receive attempt
        }

        if (sock != -1) {
            ESP_LOGE(TAG, "Shutting down socket and restarting...");
            shutdown(sock, 0); // Shutdown the socket
            close(sock); // Close the socket
        }
    }
    vTaskDelete(NULL);
}

void app_main(void)
{
    ESP_ERROR_CHECK(nvs_flash_init()); // Initialize NVS flash
    ESP_ERROR_CHECK(esp_netif_init()); // Initialize network interface
    ESP_ERROR_CHECK(esp_event_loop_create_default()); // Create default event loop

    ESP_ERROR_CHECK(example_connect()); // Connect to Wi-Fi

    // Log the IP address of the ESP32 device
    esp_netif_ip_info_t ip_info;
    esp_netif_t *netif = esp_netif_get_handle_from_ifkey("WIFI_STA_DEF");
    if (netif) {
        esp_netif_get_ip_info(netif, &ip_info);
        ESP_LOGI(TAG, "ESP32 IP Address: " IPSTR, IP2STR(&ip_info.ip)); // Log the IP address
    } else {
        ESP_LOGE(TAG, "Failed to get netif handle");
    }

    xTaskCreate(udp_client_task, "udp_client", 4096, NULL, 5, NULL); // Create the UDP client task
}

/* Expected Output :

I (5345) esp_netif_handlers: example_netif_sta ip: XXX.XX.X.XX, mask: XXX.XXX.XXX.X, gw: XXX.XX.X.X
I (5345) example_connect: Got IPv4 event: Interface "example_netif_sta" address: XXX.XX.X.XX
I (5355) example_common: Connected to example_netif_sta
I (5355) example_common: - IPv4 address: XXX.XX.X.XX,
I (5365) example_common: - IPv6 address: XXXX:0000:0000:0000:XXXX:XXXX:XXXX:XXXX, type: ESP_IP6_ADDR_IS_LINK_LOCAL
I (5375) example: ESP32 IP Address: XXX.XX.X.XX
I (5375) example: Socket created and bound to port 3333, receiving from XXX.XX.X.XXX:3333
I (5385) main_task: Returned from app_main()
I (5645) example: Received 2 bytes from XXX.XX.X.XXX:
I (5645) example: 32
I (7695) example: Received 2 bytes from XXX.XX.X.XXX:
I (7695) example: 13

*/
